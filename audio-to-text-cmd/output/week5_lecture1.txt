okay so today we are talking about new and emerging process methodologies to begin with and then we're going to talk about requirements engineering I do apologize I'm a little stuffed up but I hope that it's not too difficult to understand me through the lectures but if you do have questions please be sure that you contact me and let me know
 don't want that there right soon as I find computers trying to catch up with me and get started so last week we discussed some of the traditional process methodologies and we also mentioned some issues here and there so the reviews as a little bit of time can be an issue when it comes to large projects the projects take too long to complete because of their complexities this has also impacted the everybody's schedules If X Change and therefore it affects the cost of the project we saw especially with the waterfall model that any changes that are made will impact the full process and we can't adapt to those changes easily and our biggest issue and largest success factor at the same time
 is that of having requirements fully completed are the traditional models also focus on the documentation of the process in detail
 all ads all processes are a family of software development methodologies that produce software and short iterations and allow for changes within the design so because software development is still very labor-intensive the agile methodologies also focus on the human and team aspects of software development are there a specific characteristics and methods that depict to Agile methods divided into small pieces will allow for the team to release the software to the customer and receive feedback this allows for the system to be built incrementally and for the team to have continuous use your involvement when it comes to documentation minimal is the way to go however if you can mind is that is this is going to be a maintainable system and others will have to work on it that you have to make the documentation so that someone else can read it and know
 every aspect of your development communication between team members and the client is also extremely important to remember that the client is continuously involved in providing feedback to the team and do this we do not always hold formal meetings there are many times that informal communication takes place through quick emails text messages phone calls short virtual sessions etcetera robbed us from traditional methods is that implementation of an agile message the team is able to adapt to unexpected changes
 the world's better ways of developing software and by doing it to help others so through Manifesto
 the concepts that they look at is that Walter has value on the list of items on the ride the items that are listed on the left or just valued more okay so well you have processes and tools to be something important normally more so with your traditional models with the agile were looking at individuals in the interaction having comprehensive documentation we're more interested in the actual working software going through contract negotiations were more interested in having the customer present and collaborating with us and then as far as falling a set plan right remember against something like the waterfall model for you have to follow that plan all the way to its end before you make any change
 we want to instead be able to respond to changes
 so through this lecture we're going to go over three agile methodologies supplemental lecture will provide additional information on methodologies and others. We are not covering here or XP
 Crystal family methodologies which includes crystal clear crystal orange and Asthma mention Crystal orange and then we're also going to look at school
 has some aspects of a job but is not fully agile but it is the most popular at the moment and one that a lot of companies are using
 search program usually previous XPS we saw in the previous slide in this is one of the first and better known as a child development methodologies so as you study different messages going to notice that a lot of them were first introduced or used and Industrial manufacturing it was first used by Chrysler Corporation had the small teams that would work in the same room to encourage communication XP proposes that strictly necessary documentation is created with the code to unit test serving as documentation values for the team is to have frequent communication between team members and with the customer is to create your design and code as simple as possible and then along with communication comes
 developers developers when it comes to XP were talking about either a single developer repair developer
 unit testing integration of going to provide them with feedback small interation they're going to allow for customers to provide feedback so if there's a lot of communication there and the last poor value is labeled as the courage courage is to be able to make hard decisions and this decision it's hard decision could be to have to say that you can't use XP that it does not seem appropriate for the project
 there are also fundamental principles that embodies of core values of XP in the first two are directly from the core values which are rapid feedback and simplicity the next to you related to change so teams should not try to make any big changes changes should be made small and they should add up so when is it incremental changes usually made is that of code refactoring which is a form of toad modification to improve the structure of the code another fundamental principle is to embrace change you don't want to wait until the last possible moment to make decisions team members to try to preserve options for the future while actually solving the most pressing problems and lastly the quality of work be completed team should always strive to create as good a product as possible do the best work all the time this is the same
 natural tendency for most programmers by many processes to solve the problem at hand and more than likely will not be your best work
 now there are 10
 additional last essential principles when it comes to XP so these are things like ongoing learning small initial Investments playing to win concrete experiments and honest communication working with people's instincts accepting responsibility local adaptation traveling light and then there's an honesty measurement that goes along with it all
 so is all the core values the fundamental principles in the last Central principles most of the time the initial introduction to XPS through 12 key practices which also go into the XP process which is diagrammed in the next slide and we'll take a look at so the list of 12 is short releases metaphor simple design test-driven development design Improvement or response during their programming Collective ownership continuous integration sustainable Pace on-site customer and coding standards self-explanatory discussion
 we're not going to do that instead of getting a long-winded on all of these I just want to explain metaphor of collective ownership and sustainable Pace if any of the other nine is that I do not discuss your pose any Fashions please make sure that you asked me okay these are just some that I picked out on my own and wanted to go over now the practice Associated to metaphors is to come up with a metaphor that relates to a simple common vision of how the entire system War instead of coming up with a formal architecture so the door should be simple enough so that everybody understands it and can use it to guide their design it sounds pretty simple however it's easier said than done design Styles and metaphors can be pretty difficult to come up with
 when it comes to Collective ownership that is more self-explanatory than what it seems as if towed in the system at any time whether or not you made that change you still take ownership for it the changes or not a sustainable Pace if a developer developer constantly needs overtime than the original estimate that was made for project completion is not correct and the plan may need to be adjusted developer should work only at a pace that can be sustained to that particular person normally 40 hours a week is what we look at it because that's the regular work week and as a rule you should never work overtime two weeks in a row out if a person is constantly working
 what time his or her productivity decreases resulting and accomplishing less work and more time a consequence of all the work is also that a 50 mind is bound to make mistakes right we are Human After All
 other previously mentioned with the 12 Key Practice has received them in this graphical representation comes up with along with a customer and put all go into play once we have a plan we can start on pair programming when it comes to programming code is persistent between everyone who contributes to it and therefore allowing for the collective ownership of the product once we have code we can start testing so this is where we would do our functional and unit tests and once again that there is a collective ownership between the written test once we have the tests we can do short releases were we will either be able to proceed with continuous integration or we will receive clients which will then require us to revisit our game plan this
 is done in our sustainable pays so it should fall around the 40 hours a week work week
 7 what about the crystal family now The Crystal Method ology is actually a way to classify projects according to three factors their size which is measured in maximum number of developers their criticality which is gauged by the losses that a malfunction would cause and their priority which is measured by the time pressure on the project there are four levels of criticality as related to Quality and complexity of projects and they are life which are malfunctions that can cause physical harm to a person or possibly loss of life there is essential money which are malfunctions that may cause loss of money is essential for the organization survival there is discretionary money which are malfunctions that may cause loss of money but are not essential for the organization store
 there's Comfort which are malfunctions that do not cause measurable not monetary loss and yet still decrease comfort and pleasure to their users there are three Define methodologies as mention there's crystal clear crystal orange and Crystal orange web basically the darker the color is that have here is a mess of methodology would be Crystal Clear is considered adequate for non-critical product project sounding like a young boy going through puberty and I would know just because my son is 13 crystal clear is considered adequate for projects at the discretionary money level
 six or eight people crystal is considered adequate for critical projects of up to 40 people of Israel were looking at web development
 no Crystal methodologies have common characteristics progress is tracked by software deliveries or by Major decisions rather than by written documents Sears automated regression testing methodology
 that are held at the start and middle of each release however they can be replaced by a related to individual roles are left to the individual themselves lastly are left as local standards to be maintained by the team
 when it comes to differences in relation to two roles or separate peoples Works products and maximum release lengths now the essentials of software engineering textbook has a chart that contains the difference between crystal clear and orange that you can go in and examine
 scrub the most popular of them all events artifacts and rules of these components but you might I add other techniques or components as well and the space on short animations called Spritz spray products they are short you know you looking at about a month or or less when we get in to the cops about two weeks for each of your spreads
 Eurasian is held constant but the scope potentially shippable product Sprint hey so you'll have pieces of it. It's defines Three core roles and they have other supporting roles of parties who are vital to the success of the product or the project you have the this is the person who represents the voice of the customer deliveries values
 you have the development team usually you have anywhere from 3 to 10 developers and these are the people who actually
 produce the software
 do you have a scrum master who keeps the team on track at Astro's that's promise followed as a coach. As a project leader now there's a lot of different development approaches Associated to scram when we get into the Capstone course
 however there will not be a scrum Master everybody in the team will be responsible for doing specific tasks so scram is also based on a pillar, except for its success
 there's the transparency is making the process visible inspection all artifacts and progress are evaluated and Leslie is adaptation so whenever significant deviation is detective you correct it right away
 what's the process there are four sequential events that take place so you have Sprint decide on what will be implemented during a Sprint daily scrum meetings that take place only about 15 minutes and you pretty much answers three key questions what did you do what are you planning to do and is there anything that is from being able to accomplish what you need to
 Sprint reviews are held at the end of each Sprint to inspect to the products and adapt the backlog is needed we're going to talk about the backlog here in just a second it's effective where the team members discuss the results of the Sprint and learn from it before doing the next Sprint planning
 the backlog is part of an artifact so let's just go into that and those artifacts Associated to scrum actually happen
 happened to be
 there are defined artifacts there is product backlog be careful cuz we also have a Sprint backlog okay so there is a product backlog which is an ordered list of all remaining requirements for user stories for product is it going to be prioritized so that there can be an order of completion there is a Sprint backlog and this is the orders list of tasks that need to be done for the current Sprint
 there's an instrument which is just looking at trying to project what you are currently working on but this also includes all the requirements from the current Sprint and any previous friends that have been completed unless there is a burndown chart and this is a chart that is updated daily or even multiple times a day and it will display the remains in the current Sprint backlog
 now this is the end of the lecture for new and emerging Technologies or methodologies however please be sure that you watch the supplemental videos that are posted because of dad it will expand on what we have just discussed it will provide you with some figures to be able to understand it will also cover agile methodologies that we did not discuss during this lecture so if you have any questions concerns or comments please let me know
