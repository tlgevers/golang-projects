okay this is the first of two lectures and we are talking about the engineering of software
 so far we've talked about building a small program and the system we've taken the time to figure out if some of the differences that occur when we move from the simple small program to something a little more challenging and as we saw last week complexity is the keyword but now let's jump into what this class is really about let's talk about engineering of software what we want to make sure that we understand
 from this discussion is to fully grasp the term software engineering the concepts of software engineering know the software engineering code of ethics and also determine where and why it all got started discussion based on a strong motivation for the establishment of the discipline meaning when I say is discipline I mean software engineering and
 we're also going to look at a number of failures projects and effects that are encountered and products and what some of those reasons are
 so the chaos report was published in 1995 and it suggests that too many of the mistakes and software projects are not well investigated and that did the same mistakes continue to be repeated right we always say we should learn from history because history tends to repeat itself so using the sample size of 365 respondents researchers found that only about 16% of the software projects were completed on time and on budget so with all features and functions as they were initially specified other photos onto your profile
 the success of Taylor's factors of the Project's the softer products were successful 43% of them were considered a challenge to another world series are submitted late so they went over schedule they were over budget or they didn't have the full functionality that have been specified 18% of them failed so they were either cancelled or never used which means that they're still 61% project failures
 there are four most important reasons for a project to be successful and those that were documented for the 5:2 diet is the user software package being developed for the project was a vault there was a lot of he deserves almond there was support from management degree requirements for the project for clearly stated there were no questions or issues and then there was proper planning
 it also listed the report also listed three of the top family factors for software projects in those top three or lack of user input incomplete requirement specifications
 requirements for certification throughout the project now just three that were cited for failure that impaired or ultimately cancel the project
 incomplete requirements lack of user involvement and lack of resources so it's not surprising that we see user evolve into Mewtwo requirements listed as top reasons for both softer project successes and failures without understanding what is to be developed is there is very little change of success or I'm sorry. Change the chance there's very little chance of success for any project so saucer projects are especially difficult to specify because many aspects of the work involved having to be non tangible so requirements elicitation analysis and specification activities actually form of a very important and key component of software engineering we're actually going to discuss some of the different activities as the semester continues and if you've taken systems analysis and design you've already seen a lot of these differ
 activities that take place
 so in addition to the report providing information there's some top reasons as to why things happen that I've also been characterized as different types of issues so here we have the average percentage of God by different origin areas are you serious 38.33 % to design air is 24.17 percent documentation errors are at 13.33 % requirement errors are at 12 and a half percent a bad fit stairs are at 11.67 % these numbers here by themselves to show you that code are is the main issue when it comes to program however the main issue is tossed it is a money this is something that we normally don't think about right away an errand that is introduced during the requirements face
 a project can result into a design and coding are so it may not be discovered until after the products room downstairs I went through design and or code is generally more expensive than the cost of just fixing a simple coding are so there's more code are at 38.33 % it is the requirements are at 12 and a half percent that can be the most expensive to fix and as you noticed
 we went through the top three you don't see ears as a reason for failure you see issues with the requirements and specifications of the requirements
 so as we just pointed out a lot of times a project for you lyrics is blamed on Fab code but the cause is often something else and Associated Press report to read a systems grow more complicated instead have far less technical explanations another word for talking about fat to reduce risks many corporations are moving towards buying established and a price off their products in the implementation of these large complex enterprise resource management system the problems surrounding these types of projects are usually not the software products themselves this large Endeavors involve complex factors like executive commitments and the leadership thorough planning on both business and Technical processes
 skilled and experienced Consultants Relentless management focus and monitoring as a project to change and make adjustments when acquired some different roles and the talking about customer involvement and also management I'm actually going to include a supplemental lecture that goes over the different roles that people have within the team so please be sure that you watch that video
 2004
 there were three basic management strategies that were cited to ensure the delivery of high-quality software on a time and within budget goes to focus attention on the software developed environments discipline development processes and like to be able to gauge cost schedule and performance targets now these three characteristics are demonstrated and leading companies that have visited by the US Department of Defense so acquisition manager is for the dod has to be able to recognize him when organizations are successful and when they're not so they must be able to differentiate between those two practice good software engineering and those that don't
 now during the 1968 North Atlantic Treaty Organization or NATO conference is where the term software engineering was first introduced but let's backtrack a little more and put the scenario in order starting to face a software crisis computer hardware computing power is storage capacity and this is the start of an era as a saw the beginning of developing large and complex software that required a large number of programmers the first wave involved system-level software such as operating systems file systems and access method with the recognition of the huge potential of business automation large and complex business application software also started to emerge shortly afterwards. Early experiences with writing programs proved to be insufficient
 for these large complex projects and as a result many software
 projects were delayed and somewhere actually never completed that there were others that were completed but experienced excessive budget over on the final software product often demonstrated unsatisfactory quality and performance
 do users of the software systems are often subjected to in comprehensible manuals that were written by programmers who never met the user the software releases need a continual support and set the original programmers or not to handle this is the Fun Zone. Swear software engineering started
 now
 we know how the discipline came about so what does that actually mean one of the earlier definitions of software engineering may be attributed to David partes who's excuse me who stated that software engineering is a multi-person construction of multi version software
 Somerville states that sausage during is an engineering discipline whose focus is the cost effective development of high-quality Software System and he explains that software is an abstract and and so he Define softeners during as an engineering discipline is concerned with all aspects of software production from the early stages of system specification are states that we can focus on the computers and programming languages themselves or we can view them as tools to be used in designing and implementing solutions to a problem software engineering takes the latter view so according to harview software engineering is the application of computing tools to solving problems
 stop the software engineering 2004 curriculum guidelines for an undergraduate program published computer Society recognizes the broad scope as a field and highlights three definitions from different sources The Establishment and use of sound engineering principles in order to obtain economically software that is reliable and works on real machines that applies the principle of Computer Science and Mathematics to achieving cost-effective Solutions software problems and three application of a systematic discipline Faribault approach to the development of operation and maintenance of software
 so trying to capture the definition of software engineering into a single sentence just really seems impossible for the purposes of class we're going to refer to software engineering as a bra to feel does that touches upon all aspects of developing as supporting a software system which includes Technical and business processes specific methodologies and product characteristics and skills and tools and training and project coordination and management software engineering being such a broad concept we have to be able to narrow things down and turn that the usage of software has grown so if you're old enough 17 years ago if you were using a computer at the time of the software that you used
 nothing about today back in 2000 softer sales reached about 180 billion dollars and again that was 17 years ago can you imagine that number for today with the volume softer increasing their problems that come into play their millions of dollars of software that are stolen each year mostly in the forms of gold copied materials this is such a great issue that there's a specially-trained a team of prosecutors to focus on intellectual property crimes and if you're taking that ethics course or you have a one-hour class that you need to take any decides to take the ethics course you learn a lot more about this also
 professionals there is no equivalent professional engineering
 what does the exception in Texas there is a Board of Professional Engineers that actually has software engineering as a specific discipline under which an engineering license may be used for the most part when you go to work say maybe even as a developer would be considered to be a software engineer
 now the software industry in 2013 is a 407 billion dollar business in 2014 according to the Ada report now Athens States may not necessarily have a software engineering program but we do have the computer science option that falls under the one who starts fall 2017 or after computer science Pathways. Degree is a bat accredited here at Athens State University
 how do we become more professional and software engineering
 what what God has is there to take on software engineering as you've been able to see us for soft software itself plays a key role in all sentences of our lives right now to be able to ask professionals the software Engineers must come. To their practices at some level of professionalism to ensure that their work result
 has no harmful effects on society whatsoever so on this slide hear what you are the eight principles for ethics and professional practices in software engineering some elements you can find online and then as far as these eight principles you guys can pause the video on weed over them if you if you would like
 no more simple African influence by earlier IBM Corporation values has the following Behavior rules respect others and strive for fair perform to one's bus capability and follow the law to provide a basis for a broad scope
 of actions and judgments for professionals and software engineering so it's impossible to list all the potential places where a software engineer must behave ethically however there are plenty of opportunities with these simple guidelines would apply
 some examples of those would be information privacy handling quality issues and problem resolution project estimation and project coordination handling reuse and intellectual property handling security the question dealing with code of conduct and ethical Behavior eventually leads to a discussion of concepts related to terms such as good and bad or virtual and Evil
 established
 software engineering as a discipline many wonder what types of laws are in place of my lost refer to something equivalent to laws of motion or laws of thermodynamics software engineering we don't have these types of laws however we do have a set of proposed principles of software engineering so just take the definition of software engineering the principles have evolved through numerous years of past experiences and many are well accepted because soft engineering is still young and still developing the existing principles will continue to be modified and new ones will be added Essentials of software engineering textbook the author goes over the davises Royce's and the wasserman's principles and concepts are listed in the chapter over engineering software I need to take the time to read over those but I'm not going to go in
 and cover them in detail within our within our power points lies cuz I want to be able to try to keep our sessions short
 and due diligence with your time and says reading your textbook as part of your your to do for this class I would expect that you do you do read over these so
 the principles pretty much a three key strategies that ensure the delivery of high-quality software software that falls on time and within budget so there is a focus on software development environments which include the people that swirls in the management there is a focus on the discipline so the development processes and the
 methodical use of metrics to be able to gauge the schedule and the functional performance targets now one of the things that I'm also going to include along with this discussion so I've already mentioned that we're going to have the supplemental videos about the roles that people have to send a team I'm also going to provide an overview lecture that goes a little bit more into software engineering and also covers
 a little bit of what we're going to see in our next lecture which is the traditional process models if you have questions concerns or comments please make sure to email me and let me know
